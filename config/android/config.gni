# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This file contains common system config stuff for the Android build.

if (is_android) {
  has_chrome_android_internal =
      exec_script("//build/dir_exists.py",
                  [ rebase_path("//clank", root_build_dir) ],
                  "string") == "True"

  if (has_chrome_android_internal) {
    import("//clank/config.gni")
  }

  if (!defined(default_android_sdk_root)) {
    default_android_sdk_root =
        exec_script("//build/config/android/get_sdk_ndk_path.py",
                    [
                      "--env-var",
                      "ANDROID_HOME",
                      "-p",
                      rebase_path("${overlay_sdk_dir}"),
                    ],
                    "string")
    print("default_android_sdk_root", default_android_sdk_root)
    default_android_sdk_version = "30"
    default_android_sdk_build_tools_version = "29.0.1"
    default_android_sdk_tools_version_suffix = "-26.0.0-dev"
  }

  declare_args() {
    android_sdk_root = default_android_sdk_root
    android_sdk_version = default_android_sdk_version
    android_sdk_build_tools_version = default_android_sdk_build_tools_version
    android_sdk_tools_version_suffix = default_android_sdk_tools_version_suffix

    android_default_keystore_path =
        "//build/android/ant/chromium-debug.keystore"
    android_default_keystore_name = "chromiumdebugkey"
    android_default_keystore_password = "chromium"

    # This is a unique identifier for a given build. It's used for
    # identifying various build artifacts corresponding to a particular build of
    # chrome (e.g. where to find archived symbols).
    android_chrome_build_id = "\"\""

    # Set to true to run findbugs on JAR targets.
    run_findbugs = false

    # Set to true to enable the Errorprone compiler
    use_errorprone_java_compiler = false

    # Enables EMMA Java code coverage. Instruments classes during build to
    # produce .ec files during runtime
    emma_coverage = false

    # Unused. Required for GN files maintained in other buildroots.
    enable_java_templates = true

    # Android versionCode for android_apk()s that don't explicitly set one.
    android_default_version_code = "1"

    # Android versionName for android_apk()s that don't explicitly set one.
    android_default_version_name = "Developer Build"

    # Forced Android versionCode
    android_override_version_code = ""

    # Forced Android versionName
    android_override_version_name = ""

    # Mark APKs as android:debuggable="true".
    debuggable_apks = true

    # Disables process isolation when building _incremental targets.
    # Required for Android M+ due to SELinux policies (stronger sandboxing).
    disable_incremental_isolated_processes = false

    # Build incremental targets whenever possible.
    # Ex. with this arg set to true, the chrome_public_apk target result in
    # chrome_public_apk_incremental being built.
    incremental_apk_by_default = false

    # When true, updates all android_aar_prebuilt() .info files during gn gen.
    # Refer to android_aar_prebuilt() for more details.
    update_android_aar_prebuilts = false

    # Android API level is 18(android4.3) by default.
    android_api_level = 18
  }

  is_java_debug = true
  use_hashed_jni_names = true
  disable_android_lint = false
  lint_android_sdk_version = 29
  report_java_assert = false

  # The path to the keystore to use for signing builds.
  android_keystore_path = android_default_keystore_path

  # The name of the keystore to use for signing builds.
  android_keystore_name = android_default_keystore_name

  # The password for the keystore to use for signing builds.
  android_keystore_password = android_default_keystore_password

  # Path to where selected build variables are written to.
  android_build_vars = "$root_build_dir/build_vars.txt"

  # Host stuff -----------------------------------------------------------------

  # Defines the name the Android build gives to the current host CPU
  # architecture, which is different than the names GN uses.
  if (host_cpu == "x64" || host_cpu == "x86" || host_cpu == "arm64") {
    android_host_arch = "x86_64"
  } else {
    assert(false, "Need Android toolchain support for your build CPU arch.")
  }

  # Defines the name the Android build gives to the current host CPU
  # architecture, which is different than the names GN uses.
  if (host_os == "linux") {
    android_host_os = "linux"
  } else if (host_os == "mac") {
    android_host_os = "darwin"
  } else if (host_os == "win") {
    android_host_os = "windows"
  } else {
    assert(false, "Need Android toolchain support for your build OS.")
  }

  # Directories and files ------------------------------------------------------
  #
  # We define may of the dirs strings here for each output architecture (rather
  # than just the current one) since these are needed by the Android toolchain
  # file to define toolchains for all possible targets in one pass.

  android_sdk = "${android_sdk_root}/platforms/android-${android_sdk_version}"

  # Path to the Android NDK and SDK.
  android_ndk_root = exec_script("//build/config/android/get_sdk_ndk_path.py",
                                 [
                                   "--env-var",
                                   "ANDROID_NDK",
                                   "-p",
                                   rebase_path("${overlay_ndk_dir}"),
                                 ],
                                 "string")
  print("android_ndk_root", android_ndk_root)
  android_ndk_include_dir = "$android_ndk_root/usr/include"

  android_sdk = "${android_sdk_root}/platforms/android-${android_sdk_version}"

  android_sdk_tools = "${android_sdk_root}/tools"
  android_sdk_build_tools =
      "${android_sdk_root}/build-tools/$android_sdk_build_tools_version"

  # Path to the SDK's android.jar
  android_sdk_jar = "$android_sdk/android.jar"

  zipalign_path = "$android_sdk_build_tools/zipalign"

  # Subdirectories inside android_ndk_root that contain the sysroot for the associated platform;
  # we have already set 16 as the default value for android_api_level.
  if (current_cpu == "x64" || current_cpu == "arm64") {
    android_api_level = 22
  }
  x86_android_sysroot_subdir = "platforms/android-${android_api_level}/arch-x86"
  arm_android_sysroot_subdir = "platforms/android-${android_api_level}/arch-arm"
  mips_android_sysroot_subdir =
      "platforms/android-${android_api_level}/arch-mips"
  x86_64_android_sysroot_subdir =
      "platforms/android-${android_api_level}/arch-x86_64"
  arm64_android_sysroot_subdir =
      "platforms/android-${android_api_level}/arch-arm64"
  mips64_android_sysroot_subdir =
      "platforms/android-${android_api_level}/arch-mips64"

  # Toolchain root directory for each build. The actual binaries are inside
  # a "bin" directory inside of these.
  _android_toolchain_version = "4.9"
  x86_android_toolchain_root = "$android_ndk_root/toolchains/llvm/prebuilt/${android_host_os}-${android_host_arch}"
  arm_android_toolchain_root = "$android_ndk_root/toolchains/llvm/prebuilt/${android_host_os}-${android_host_arch}"
  mips_android_toolchain_root = "$android_ndk_root/toolchains/llvm/prebuilt/${android_host_os}-${android_host_arch}"
  x86_64_android_toolchain_root = "$android_ndk_root/toolchains/llvm/prebuilt/${android_host_os}-${android_host_arch}"
  arm64_android_toolchain_root = "$android_ndk_root/toolchains/llvm/prebuilt/${android_host_os}-${android_host_arch}"
  mips64_android_toolchain_root = "$android_ndk_root/toolchains/llvm/prebuilt/${android_host_os}-${android_host_arch}"

  # Location of libgcc. This is only needed for the current GN toolchain, so we
  # only need to define the current one, rather than one for every platform
  # like the toolchain roots.
  if (current_cpu == "x86") {
    android_prebuilt_arch = "android-x86"
    android_target_triple = "i686-linux-android"
    android_toolchain_root = "$x86_android_toolchain_root"
    android_sysroot_subdir = "$x86_android_sysroot_subdir"
  } else if (current_cpu == "arm") {
    android_prebuilt_arch = "android-arm"
    android_target_triple = "arm-linux-androideabi"
    android_toolchain_root = "$arm_android_toolchain_root"
    android_sysroot_subdir = "$arm_android_sysroot_subdir"
  } else if (current_cpu == "mipsel") {
    android_prebuilt_arch = "android-mips"
    android_target_triple = "mipsel-linux-android"
    android_toolchain_root = "$mips_android_toolchain_root"
    android_sysroot_subdir = "$mips_android_sysroot_subdir"
  } else if (current_cpu == "x64") {
    android_prebuilt_arch = "android-x86_64"
    android_target_triple = "x86_64-linux-android"
    android_toolchain_root = "$x86_64_android_toolchain_root"
    android_sysroot_subdir = "$x86_64_android_sysroot_subdir"
  } else if (current_cpu == "arm64") {
    android_prebuilt_arch = "android-arm64"
    android_target_triple = "aarch64-linux-android"
    android_toolchain_root = "$arm64_android_toolchain_root"
    android_sysroot_subdir = "$arm64_android_sysroot_subdir"
  } else if (current_cpu == "mips64el") {
    android_prebuilt_arch = "android-mips64"
    android_target_triple = "mips64el-linux-android"
    android_toolchain_root = "$mips64_android_toolchain_root"
    android_sysroot_subdir = "$mips64_android_sysroot_subdir"
  } else {
    assert(false, "Need android libgcc support for your target arch.")
  }

  android_tool_prefix = "$android_toolchain_root/bin/$android_target_triple-"

  android_ndk_major_version = exec_script("//build/android/ndk_version.py", [
      rebase_path("${android_ndk_root}/source.properties", ".") ], "value")
  if (android_ndk_major_version >= 27) {
    android_tool_prefix = "$android_ndk_root/toolchains/llvm/prebuilt/${android_host_os}-${android_host_arch}/bin/llvm-"
  }

  android_readelf = "${android_tool_prefix}readelf"
  android_objcopy = "${android_tool_prefix}objcopy"
  android_gdbserver =
      "$android_ndk_root/prebuilt/$android_prebuilt_arch/gdbserver/gdbserver"

  # Toolchain stuff ------------------------------------------------------------

  android_libcpp_root = "$android_ndk_root/sources/cxx-stl/llvm-libc++"
  if (component_mode == "shared_library") {
    android_libcpp_library = "c++_shared"
  } else {
    android_libcpp_library = "c++_static"
  }

  if (component_mode == "shared_library") {
    # By appending .cr, we prevent name collisions with libraries already
    # loaded by the Android zygote.
    android_product_extension = ".cr.so"
  } else {
    android_product_extension = ".so"
  }

  # ABI ------------------------------------------------------------------------

  if (current_cpu == "x86") {
    android_app_abi = "x86"
  } else if (current_cpu == "arm") {
    import("//build/config/arm.gni")
    if (arm_version < 7) {
      android_app_abi = "armeabi"
    } else {
      android_app_abi = "armeabi-v7a"
    }
  } else if (current_cpu == "mipsel") {
    android_app_abi = "mips"
  } else if (current_cpu == "x64") {
    android_app_abi = "x86_64"
  } else if (current_cpu == "arm64") {
    android_app_abi = "arm64-v8a"
  } else if (current_cpu == "mips64el") {
    android_app_abi = "mips64"
  } else {
    assert(false, "Unknown Android ABI: " + current_cpu)
  }

  # Libc++ library directory.
  android_libcpp_lib_dir = "${android_libcpp_root}/libs/${android_app_abi}"

  android_log_tag = "\"lynx\""

  # Write to a file some GN vars that are useful to scripts that use the output
  # directory. Format is chosen as easliy importable by both python and bash.
  _lines = [
    "android_sdk_build_tools=" +
        rebase_path(android_sdk_build_tools, root_build_dir),
    "android_sdk_build_tools_version=$android_sdk_build_tools_version",
    "android_sdk_tools_version_suffix=$android_sdk_tools_version_suffix",
    "android_sdk_root=" + rebase_path(android_sdk_root, root_build_dir),
    "android_sdk_version=$android_sdk_version",
    "android_ndk_root=" + rebase_path(android_ndk_root, root_build_dir),
    "android_tool_prefix=" + rebase_path(android_tool_prefix, root_build_dir),
  ]

  # Intentionally do not define android_app_secondary_abi_cpu and
  # android_app_secondary_abi for 32-bit target_cpu, since they are not used.
  if (target_cpu == "arm64") {
    android_secondary_abi_cpu = "arm"
    android_app_secondary_abi = "armeabi-v7a"
    android_tertiary_abi_cpu = "x86"
    android_app_tertiary_abi = "x86"
  } else if (target_cpu == "x64") {
    android_secondary_abi_cpu = "x86"
    android_app_secondary_abi = "x86"
  } else if (target_cpu == "mips64el") {
    android_secondary_abi_cpu = "mipsel"
    android_app_secondary_abi = "mips"
  }

  if (defined(android_secondary_abi_cpu)) {
    android_secondary_abi_toolchain =
        "//build/toolchain/android:clang_${android_secondary_abi_cpu}"
  }
  if (defined(android_tertiary_abi_cpu)) {
    android_tertiary_abi_toolchain =
        "//build/toolchain/android:clang_${android_tertiary_abi_cpu}"
  }

  if (defined(android_secondary_abi_cpu)) {
    _secondary_label_info =
        get_label_info(":foo($android_secondary_abi_toolchain)", "root_out_dir")
    _lines += [ "android_secondary_abi_toolchain=" +
                rebase_path(_secondary_label_info, root_build_dir) ]
  }
  if (defined(build_apk_secondary_abi)) {
    _lines += [ "build_apk_secondary_abi=$build_apk_secondary_abi" ]
  }
  write_file(android_build_vars, _lines)
}
